pragma solidity 0.8.15; 
 
contract Bank {
    mapping (address => uint) balance;
    address owner;

    event balanceAdded(uint amount, address depositedTo);

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function addBalance(uint _toAdd) public returns(uint) {
        balance[msg.sender] += _toAdd;
        //emit is when you use uour event 'keyword';
        emit balanceAdded( _toAdd, msg.sender);
        return balance[msg.sender];
    }

    function transfer(address reciever, uint amount) public onlyOwner {
        //check balance of user before sending
        require (balance[msg.sender] >= amount, "you dont have enough balance");
        require (msg.sender != reciever);

        uint previousSenderBalance = balance[msg.sender];

        balance[msg.sender] -= amount;
        balance[reciever] += amount;

        assert(balance[msg.sender] == previousSenderBalance - amount);
    }
}
